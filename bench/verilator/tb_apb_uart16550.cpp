/////////////////////////////////////////////////////////////////////
//   ,------.                    ,--.                ,--.          //
//   |  .--. ' ,---.  ,--,--.    |  |    ,---. ,---. `--' ,---.    //
//   |  '--'.'| .-. |' ,-.  |    |  |   | .-. | .-. |,--.| .--'    //
//   |  |\  \ ' '-' '\ '-'  |    |  '--.' '-' ' '-' ||  |\ `--.    //
//   `--' '--' `---'  `--`--'    `-----' `---' `-   /`--' `---'    //
//                                             `---'               //
//    UART16550 Verilator Testbench                                //
//                                                                 //
/////////////////////////////////////////////////////////////////////
//                                                                 //
//             Copyright (C) 2023 Roa Logic BV                     //
//             www.roalogic.com                                    //
//                                                                 //
//     This source file may be used and distributed without        //
//   restriction provided that this copyright statement is not     //
//   removed from the file and that any derivative work contains   //
//   the original copyright notice and the associated disclaimer.  //
//                                                                 //
//      THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY        //
//   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED     //
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS     //
//   FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL THE AUTHOR        //
//   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,           //
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES      //
//   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE     //
//   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR          //
//   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    //
//   LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT    //
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT    //
//   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE           //
//   POSSIBILITY OF SUCH DAMAGE.                                   //
//                                                                 //
/////////////////////////////////////////////////////////////////////



//Move below two into "common.h"

//For std::unique_ptr
#include <memory>

//Include common routines
#include <verilated.h>

//Include model header, generated by Verilator
#include "Vapb_uart16550.h"

//Legacy function required only so linking works on Cygwin and MSVC++ and MacOS
double sc_time_stamp() { return 0; }


int main(int argc, char **argv)
{
  const std::unique_ptr<VerilatedContext> contextp(new VerilatedContext);


  //Pass arguments to Verilated code
  contextp->commandArgs(argc, argv);

  //Create model for DUT
  const std::unique_ptr<Vapb_uart16550> dut{new Vapb_uart16550{contextp.get(), "apb_uart16550"}};


  //Create clocks (TODO create clock-class)
  //Create APB interface (TODO create APB class)

  //Initialise input signals
  dut->PRESETn = !0;
  dut->PCLK    =  0;
  dut->PSEL    =  0;


  //Simulate the design (until $finish)
  while (!contextp->gotFinish())
  {
    //1 timeprecision period passed
    contextp->timeInc(1);

    //toggle clock
    dut->PCLK = !dut->PCLK;


    //Generate reset
    if (!dut->PCLK)
    {
      if (contextp->time() > 1 && contextp->time() < 10)
        dut->PRESETn = !1; //assert reset
      else
        dut->PRESETn = !0; //negate reset
    }

    //evaluate model
    dut->eval();


  }

  //Model cleanup
  dut->final();

  //Completed succesfully
  return 0;
}


