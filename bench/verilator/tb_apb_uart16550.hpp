/////////////////////////////////////////////////////////////////////
//   ,------.                    ,--.                ,--.          //
//   |  .--. ' ,---.  ,--,--.    |  |    ,---. ,---. `--' ,---.    //
//   |  '--'.'| .-. |' ,-.  |    |  |   | .-. | .-. |,--.| .--'    //
//   |  |\  \ ' '-' '\ '-'  |    |  '--.' '-' ' '-' ||  |\ `--.    //
//   `--' '--' `---'  `--`--'    `-----' `---' `-   /`--' `---'    //
//                                             `---'               //
//    UART16550 Verilator Testbench                                //
//                                                                 //
/////////////////////////////////////////////////////////////////////
//                                                                 //
//             Copyright (C) 2024 Roa Logic BV                     //
//             www.roalogic.com                                    //
//                                                                 //
//     This source file may be used and distributed without        //
//   restriction provided that this copyright statement is not     //
//   removed from the file and that any derivative work contains   //
//   the original copyright notice and the associated disclaimer.  //
//                                                                 //
//      THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY        //
//   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED     //
//   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS     //
//   FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL THE AUTHOR        //
//   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,           //
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES      //
//   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE     //
//   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR          //
//   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    //
//   LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT    //
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT    //
//   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE           //
//   POSSIBILITY OF SUCH DAMAGE.                                   //
//                                                                 //
/////////////////////////////////////////////////////////////////////
//For std::unique_ptr
#include <memory>

//For assertions
#include <cassert>

//Include common routines
#include <testbench.hpp>

//Include model header, generated by Verilator
#include "Vapb_uart16550.h"
#include "Vapb_uart16550__Dpi.h"

//Include APB4 bus
#include <busapb4.hpp>

using namespace RoaLogic;
using namespace testbench;
using namespace tasks;
using namespace clock;
using namespace bus;

//165550 Register Definitions
#define RBR          0x0
#define THR          0x0
#define IER          0x1
#define IIR          0x2
#define FCR          0x2
#define LCR          0x3
#define MCR          0x4
#define LSR          0x5
#define MSR          0x6
#define SCR          0x7
#define DLL          0x0
#define DLM          0x1

#define PEEK_RBR     0x00
#define PEEK_THR     0x00
#define PEEK_IER     0x01
#define PEEK_IIR     0x02
#define PEEK_FCR     0x12
#define PEEK_LCR     0x03
#define PEEK_MCR     0x04
#define PEEK_LSR     0x05
#define PEEK_MSR     0x06
#define PEEK_SCR     0x07
#define PEEK_DLL     0x20
#define PEEK_DLM     0x21


//IER register definitions
#define ERBF         0x01
#define ETBEI        0x02
#define ELSI         0x04
#define EDSSI        0x08

//IIR register definitions
#define IP           0x01

//FCR register definitions
#define FIFO_ENABLE  0x01
#define RXFIFO_RST   0x02
#define TXFIFO_RST   0x04
#define DMA_MODE     0x08

//LCR register definitions
#define WLS          0x03
#define STB          0x04
#define PEN          0x08
#define EPS          0x10
#define STICK        0x20
#define BREAK        0x40
#define DLAB         0x80

//MCR register definitions
#define DTR          0x01
#define RTS          0x02
#define OUT1         0x04
#define OUT2         0x08
#define LOOP         0x10

//LSR register definitions
#define DR           0x01
#define OE           0x02
#define PE           0x04
#define FE           0x08
#define BI           0x10
#define THRE         0x20
#define TEMT         0x40
#define RXFIFO_ERROR 0x80

//MSR register definitions
#define DCTS         0x01
#define DDSR         0x02
#define TERI         0x04
#define DDCD         0x08
#define CTS          0x10
#define DSR          0x20
#define RI           0x40
#define DCD          0x80


typedef enum 
{
    noneParity = 0x00,
    oddParity  = 0x08,
    evenParity = 0x18
} parity_t;


/**
 * @class cAPBUart16550TestBench
 * @author Richard Herveille, Bjorn Schouteten
 * @brief APB Uart16550 class for a testbench
 * @version 0.1
 * @date 30-apr-2023
 *
 * @details This is the class to control the APB uart 16550 testbench
 * 
 * This object controls the APB uart16550 testbench in a specific way. It has knowledge of all the
 * high level connections and how to control the DUT. Tests can be added and run without the context 
 * of this class. 
 * 
 * It is derived from the cTestBench to have a general testbench control
 *
 */
class cAPBUart16550TestBench : public cTestBench<Vapb_uart16550>
{
    private:
        cClock* pclk;
        cBusAPB4<uint8_t, uint8_t>* apbMaster;
        
        sCoRoutineHandler<bool> generateReset();

        sCoRoutineHandler<bool> scratchpadTest (size_t runs);

        void    release(uint8_t reg);
        void    poke (uint8_t reg, uint8_t val);
        uint8_t peek (uint8_t reg);

    public:

        cAPBUart16550TestBench(VerilatedContext* context, bool traceActive);
        ~cAPBUart16550TestBench();

        int run();       
};
